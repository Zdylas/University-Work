import numpy as np
import numpy.linalg as la



def markov_chains(transition_matrix, vector, n):
    # Computes markov chain to n power returning the last matrix in chain
    # Using A^k = P D^k P_-1

    d, P = la.eig(transition_matrix)
    P_1 = la.inv(P)
    D = np.diag(d)

    nth_term = P @ la.matrix_power(D, n) @ P_1 @ vector 
    
    return nth_term
    
def power_method(matrix, vector, iterations):
    # Finds an estimation for the dominant eigenvalue and eigenvector pair
    # Return last iteration 

    for _ in range(iterations):
        vector = vector/la.norm(vector, 2)
        vector = matrix @ vector

    dominant_eigenvector = vector/la.norm(vector, 2)
    dominant_eigenvalue = la.norm(vector, 2) 

    return dominant_eigenvalue, dominant_eigenvector

def leslie(matrix, starting_vector, iterations):
    # Prints the leslie matrix each iteration 

    new_vector = matrix @ starting_vector
    print(new_vector)
    for i in range(iterations-1):
        new_vector = matrix @ new_vector
        print(new_vector)
    
def test_markov():
    # Setup matrices to find markov chain results for nth term
    transition_matrix = np.array([[0.6, 0.1, 0.2],
                                  [0.2, 0.7, 0.4],
                                  [0.2, 0.2, 0.4]])

    initial_s_vector = np.array([[0.2],
                                 [0.5],
                                 [0.3]])

    n = 10000 #approximation to inf

    print(markov_chains(transition_matrix, initial_s_vector, n))

def test_leslie():
    leslie_matrix = np.array([[0, 1, 2, 5],
                              [0.5, 0, 0, 0],
                              [0, 0.7, 0, 0],
                              [0, 0, 0.3, 0]])

    initial_s_vector = np.array([[10],
                                [10],
                                [10],
                                [10]])
    iterations = 3

    leslie(leslie_matrix, initial_s_vector, iterations)


def test_power_method():
    matrix = np.array([[7, 2],
                         [2, 3]])

    start_vector = np.array([[1],
                             [0]])

    iterations = 6

    eigenvalue, eigenvector = power_method(matrix, start_vector, iterations)

    print(f"Eigenvalue: {eigenvalue}\nEingenvector:\n{eigenvector}")

def main():

    #test_markov()
    
    #test_leslie()

    test_power_method()


if __name__ == "__main__":
    main()


